from sklearn.metrics import accuracy_score

def ablation_study(model, X_train, y_train, X_test, y_test, features):
    baseline_model = model.fit(X_train, y_train)
    baseline_pred = baseline_model.predict(X_test)
    baseline_acc = accuracy_score(y_test, baseline_pred)
    print(f"Baseline accuracy: {baseline_acc}")

    for feature in features:
        X_train_new = X_train.drop(columns=[feature])
        X_test_new = X_test.drop(columns=[feature])
        new_model = model.fit(X_train_new, y_train)
        new_pred = new_model.predict(X_test_new)
        new_acc = accuracy_score(y_test, new_pred)
        print(f"Accuracy without {feature}: {new_acc}")

# Example usage
features_to_test = ['feature1', 'feature2', 'feature3']
ablation_study(gbm, X_train, y_train, X_test, y_test, features_to_test)

feature_names = X_train.columns
importance_df = pd.DataFrame({'feature': feature_names, 'importance': feature_importances_gain})

# Select the top 50 features by gain
top_50_features = importance_df.nlargest(50, 'importance')['feature']

# Filter the training and test sets to include only the top 50 features
X_train_top50 = X_train[top_50_features]
X_test_top50 = X_test[top_50_features]

# Explain the model's predictions using SHAP for the top 50 features
explainer = shap.Explainer(gbm, X_train_top50)
shap_values = explainer(X_test_top50)

# Summary plot of SHAP values for the top 50 features
shap.summary_plot(shap_values, X_test_top50)

# Force plot for a single prediction for the top 50 features
shap.force_plot(explainer.expected_value, shap_values[0], X_test_top50.iloc[0])
